sync_builder() {    local builder_server=$1    local nss_source='/home/mathias/workspace/bspki/dev'    local nss_sync_dir=$2    if [ $# -ge 3 ]; then        local sync_sub_part=$3        local abs_sync_part=$(readlink -m $sync_sub_part)        if [[ $sync_sub_part =~ "/$" ]]; then            echo "Error $sync_sub_part should not have an ending '/'"            return -1        fi        if [ ! -e $abs_sync_part ]; then            echo "Error $sync_sub_part does not exist"            return -1        fi        if [[ $abs_sync_part =~ "^$nss_source/(.*)" ]]; then            nss_source="$nss_source/$match"            local dirname_part="$(dirname $match)/"            if [[ $dirname_part == "./" ]]; then                dirname_part=""            fi            local name_sync="dev/$dirname_part"            nss_sync_dir="$nss_sync_dir$name_sync"        else            echo "Error $abs_sync_part is not in $nss_source"            return -1        fi    fi    rsync -c -a -v -P  -h -H --delete --exclude=.git $nss_source $builder_server:$nss_sync_dir},V
alias matu-op='ssh root@matu-op'alias matu-ais='ssh root@matu-ais'alias matu-af='ssh root@matu-af'alias server='ssh root@nss-builder-server-mcr'alias router='ssh root@nss-builder-mcr'alias builder-1='ssh root@nssa-builder-1'alias builder-2='ssh root@nssa-builder-2'alias nss-storage='ssh root@nss-storage'alias pki-builder='ssh mcrombez@pki-builder.ais.prg.sds.safran',V
alias sync_builder_server="sync_builder root@nss-builder-server-mcr /root/"alias sync_builder_router="sync_builder root@nss-builder-mcr /home/builder/build/",V
	@cd $(WRKSRC);echo "test"; \,V
	@echo "test"   ,V
	@echo    	@echo ">>> Patching"	@cd $(WRKSRC); \	for p in $(PATCHES_ML4);              \    do                                 \        echo;                          \        echo "   * $${p}";             \        patch -u -p1 < ../../patches_ml4/$${p} > /dev/null;       \    done,V
endif,V
ifeq ($(NSS_TARGET),resident),V
$(PATCHES) ,v
orig.,v
x,v
 ,v
_ML4,v
,V
patches/grub_0.97-47lenny2.diff,v
p,v
distfiles/grub_0.97.orig.tar.gz,v
grub_0.97.orig.tar.gz distfiles/grub_0.97.orig.tar.gz,v
c,v
	cp ../../../nssa/os_common/debian/src/pkg/grub/grub_0.97.orig.tar.gz distfiles/grub_0.97.orig.tar.gz,V
../../../nssa/os_common/debian/src/pkg/grub/,v
	# Override them by an 'exit 1' if target or product unknown	# KNOWN_PRODUCT="no"	#   if [ "$i" = "$nss_product" ]; then	#     KNOWN_PRODUCT="yes"	#   fi	# done	# if [ "$KNOWN_PRODUCT" = "no" ]; then	#   CLEAN_CMD="exit 1"	#   BUILD_CMD="exit 1"	#   GET_GENERATED_FILES_LIST_CMD="true"	# fi	#	# KNOWN_TARGET="no"	# for i in ${TARGET_OK}; do	#   if [ "$i" = "$nss_target" ]; then	#     KNOWN_TARGET="yes"	#   fi	# done	# if [ "$KNOWN_TARGET" = "no" ]; then	#   echo "Cannot build for target $nss_target ! Only know [${TARGET_OK}]"	#   CLEAN_CMD="exit 1"	#   BUILD_CMD="exit 1"	#   GET_GENERATED_FILES_LIST_CMD="true"	# fi,V
                                ,8
Debian_Lenny,v
S,v
O,v
detect_archi(){    #Get system information    machine_hardware=$(uname -m)    case $machine_hardware in        ppc)            ARCHI='gnuspe'        ;;        i*86)            ARCHI='i386'        ;;    esac},V
	$(PATCH_DIR)/resident-dg-lru-ansu.diff \,V
    unset DEB_HOST_ARCH;    case ${NSS_TARGET} in        ansu) DEB_HOST_ARCH=i386 ;;        aru)            if [ "x${NSS_HARDWARE}" = "xlru" ]; then                DEB_HOST_ARCH=gnuspe            else                DEB_HOST_ARCH=i386            fi            ;;    esac,V
),v
(,v
$,v
neq ($(NSS_HARDWARE),ml4),v
 lg-ml4,v
# CONFIG_BINARY_PRINTF is not set,V
CONFIG_ISA_DMA_API=y,V
CONFIG_SECCOMP=y,V
## CPU Frequency scaling#,V
# CONFIG_SFI is not set,V
# CONFIG_LEDS_ALIX2 is not set,V
# CONFIG_SENSORS_HDAPS is not set# CONFIG_SENSORS_APPLESMC is not set## ACPI drivers## CONFIG_SENSORS_ATK0110 is not set# CONFIG_SENSORS_LIS3LV02D is not set,V
i,v
CONFIG_SENSORS_CORETEMP=y,V
# CONFIG_CPU_FREQ is not set# CONFIG_CPU_IDLE is not set,V
# CONFIG_CPU_FREQ is not set,V
=y,v
# CONFIG_PROVIDE_OHCI1394_DMA_INIT is not set,V
# CONFIG_BOOT_PRINTK_DELAY is not set,V
CONFIG_FRAME_POINTER=y,V
# CONFIG_HUGETLBFS is not set,V
# CONFIG_SENSORS_ABITUGURU is not set# CONFIG_SENSORS_ABITUGURU3 is not set,V
# CONFIG_SCx200_ACB is not set,V
# CONFIG_HPET is not set# CONFIG_HANGCHECK_TIMER is not set,V
# CONFIG_PC8736x_GPIO is not set# CONFIG_NSC_GPIO is not set# CONFIG_CS5535_GPIO is not set,V
# CONFIG_MWAVE is not set,V
# CONFIG_SONYPI is not set,V
CONFIG_SERIAL_8250_PNP=y,V
# CONFIG_PATA_CS5535 is not set# CONFIG_PATA_CS5536 is not set,V
# CONFIG_PATA_ACPI is not set,V
CONFIG_ATA_ACPI=y,V
# CONFIG_MTD_TS5500 is not set,V
# CONFIG_MTD_NETSC520 is not set,V
DG MFTD  ANSU  : $0 -g gen1 -p dg -h mftd  -t ansu -c C4,V
LG LIGHT ANSU  : $0 -g gen1 -p lg -h light -t ansu -c LB4LG LIGHT ARU   : $0 -g gen1 -p lg -h light -t aru  -c LB4LG SL4   ANSU  : $0 -g gen1 -p lg -h sl4   -t ansu -c LB4LG SL4   ARU   : $0 -g gen1 -p lg -h sl4   -t aru  -c LB4,V
LB4,v
L,v
LG LRU   ANSU  : $0 -g gen1 -p lg -h lru   -t ansu -c LB4LG LRU   ARU   : $0 -g gen1 -p lg -h lru   -t aru  -c LB4,V
C,v
D,v
DG ML4   ANSU  : $0 -g avionics -p dg -h ml4   -t ansu -c C5DG ML4   ARU   : $0 -g avionics -p dg -h ml4   -t aru  -c C5,V
*,v
** C5 *****************************************************,V
C5,V
C5 ,v
DG LRU   ANSU  : $0 -g avionics -p dg -h lru   -t ansu -c C5DG LRU   ARU   : $0 -g avionics -p dg -h lru   -t aru  -c C5,V
DG LIGHT ANSU  : $0 -g avionics -p dg -h light -t ansu -c C5DG LIGHT ARU   : $0 -g avionics -p dg -h light -t aru  -c C5,V
dg-ml4:rpm_options:NSS-grub:--force ,V
$(NSS_TAG)-$(NSS_PRODUCT)-$(NSS_HARDWARE)-$(NSS_TARGET)-$(DEB_HOST_ARCH)-,v
$(NSS_TAG)-$(NSS_PRODUCT)-$(NSS_HARDWARE)-$(NSS_TARGET)-$(DEB_HOST_ARCH),v
	# Cleanup perl: should be only necessary for package	# installation and setup, not during operational:         #        # THIS SHOULD BE THE LAST OPERATION ON PACKAGES AS IT IS	# LIKELY TO BE NEEDED TO UNINSTALL OTHER PACKAGES        #,V
{,v
	# Cleanup perl: should be only necessary for package	# installation and setup, not during operational: 	#	# THIS SHOULD BE THE LAST OPERATION ON PACKAGES AS IT IS	# LIKELY TO BE NEEDED TO UNINSTALL OTHER PACKAGES	#,V
${APT_GET_INSTALL}  efibootmgr,V
diff # for HIDS,v
${APT_GET_INSTALL}  diff # for HIDS,V
 # for HIDS,v
## Processor support#,V
CONFIG_HAVE_SYSCALL_TRACEPOINTS=y,V
CONFIG_HAVE_FUNCTION_GRAPH_FP_TEST=yCONFIG_HAVE_FUNCTION_TRACE_MCOUNT_TEST=y,V
CONFIG_USER_STACKTRACE_SUPPORT=y,V
CONFIG_ARCH_WANT_FRAME_POINTERS=yCONFIG_FRAME_POINTER=y# CONFIG_BOOT_PRINTK_DELAY is not set,V
CONFIG_TRACE_IRQFLAGS_SUPPORT=y,V
CONFIG_TMPFS_POSIX_ACL=y# CONFIG_HUGETLBFS is not set# CONFIG_HUGETLB_PAGE is not set# CONFIG_CONFIGFS_FS is not setCONFIG_MISC_FILESYSTEMS=y# CONFIG_ADFS_FS is not set# CONFIG_AFFS_FS is not set# CONFIG_HFS_FS is not set# CONFIG_HFSPLUS_FS is not set# CONFIG_BEFS_FS is not set# CONFIG_BFS_FS is not set# CONFIG_EFS_FS is not set# CONFIG_CRAMFS is not setCONFIG_SQUASHFS=y# CONFIG_SQUASHFS_EMBEDDED is not setCONFIG_SQUASHFS_FRAGMENT_CACHE_SIZE=3# CONFIG_VXFS_FS is not set# CONFIG_MINIX_FS is not set# CONFIG_OMFS_FS is not set# CONFIG_HPFS_FS is not set# CONFIG_QNX4FS_FS is not set# CONFIG_ROMFS_FS is not set# CONFIG_SYSV_FS is not set# CONFIG_UFS_FS is not set# CONFIG_AUFS_FS is not set# CONFIG_JFFS2_FS is not set,V
# CONFIG_TMPFS_POSIX_ACL is not set# CONFIG_HUGETLB_PAGE is not setCONFIG_CONFIGFS_FS=y# CONFIG_MISC_FILESYSTEMS is not set,V
# CONFIG_RTC_DRV_GENERIC is not set,V
# CONFIG_SENSORS_APPLESMC is not set## ACPI drivers## CONFIG_SENSORS_ATK0110 is not set# CONFIG_SENSORS_LIS3LV02D is not setCONFIG_THERMAL=y# CONFIG_THERMAL_HWMON is not set,V
SENSORS_HDAPS ,v
# CONFIG_SENSORS_VIA_CPUTEMP is not set,V
# CONFIG_SENSORS_CORETEMP is not set,V
# CONFIG_SENSORS_FSCHMD is not set,V
